from rich.prompt import Prompt
from .utils.hierarchical_menu import hierarchical_menu

class CurriculumManager:
    
    async def show_curriculum(self):
        """HiyerarÅŸik mÃ¼fredat gÃ¶ster sistemi"""
        from core.unified_curriculum import unified_curriculum
        
        console.print(Panel("[bold green]ðŸ“š HIYERAÅžÄ°K MÃœFREDAT GÃ–STERÄ°M SÄ°STEMÄ°[/bold green]"))
        
        # Ensure curriculum is loaded
        if not unified_curriculum.loader.curriculum_data:
            self.console.print("[yellow]MÃ¼fredat verileri yÃ¼kleniyor...[/yellow]")
            success = unified_curriculum.loader.load_all_curriculum()
            if not success:
                self.console.print("[red]MÃ¼fredat verileri yÃ¼klenemedi![/red]")
                return
            self.console.print("[green]âœ“ MÃ¼fredat verileri yÃ¼klendi[/green]")
        
        self.console.print("\n[bold cyan]MÃ¼fredat GÃ¶rÃ¼ntÃ¼leme ModlarÄ±:[/bold cyan]")
        self.console.print("  1. HiyerarÅŸik Gezinti - Kademeli mÃ¼fredat seÃ§imi")
        self.console.print("  2. Uzman Ä°ncelemesi - Dersin uzmanÄ± ile mÃ¼fredat analizi")
        self.console.print("  3. Genel GÃ¶rÃ¼ntÃ¼leme - TÃ¼m derslerin Ã¶zeti")
        
        browse_mode = Prompt.ask("GÃ¶rÃ¼ntÃ¼leme modu", choices=["1", "2", "3"], default="1")
        
        if browse_mode == "1":
            # HiyerarÅŸik gezinti
            await self._hierarchical_curriculum_browse()
        elif browse_mode == "2":
            # Uzman incelemesi
            await self._expert_curriculum_analysis()
        else:
            # Genel gÃ¶rÃ¼ntÃ¼leme
            await self._general_curriculum_overview()
            
    async def _hierarchical_curriculum_browse(self):
        """HiyerarÅŸik mÃ¼fredat gezintisi"""
        from core.unified_curriculum import unified_curriculum
        
        # 1. Ders SeÃ§imi
        subject_result = hierarchical_menu.show_subject_selection()
        if not subject_result:
            return
        subject_name, subject_code = subject_result
        
        # 2. SÄ±nÄ±f SeÃ§imi
        grade = hierarchical_menu.show_grade_selection(subject_name, subject_code)
        if not grade:
            return
            
        # 3. Ãœnite SeÃ§imi
        unit_result = hierarchical_menu.show_unit_selection(subject_name, subject_code, grade)
        if not unit_result:
            return
        unit_code, unit_title = unit_result
        
        # 4. Alt Konu SeÃ§imi (opsiyonel)
        subtopic_result = hierarchical_menu.show_subtopic_selection(subject_name, subject_code, grade, unit_code)
        if not subtopic_result:
            return
        subtopic_code, subtopic_title = subtopic_result
        
        # 5. Detay GÃ¶rÃ¼ntÃ¼leme
        await self._show_curriculum_details(subject_name, subject_code, grade, unit_code, subtopic_code)
            
    async def _expert_curriculum_analysis(self):
        """Uzman ile mÃ¼fredat analizi - hiyerarÅŸik seÃ§im"""
        from core.unified_curriculum import unified_curriculum
        
        # HiyerarÅŸik seÃ§im ile uzman analizi
        subject_result = hierarchical_menu.show_subject_selection()
        if not subject_result:
            return
        subject_name, subject_code = subject_result
        
        self.console.print(f"\n[bold green]ðŸŽ“ {subject_name} UzmanÄ± ile MÃ¼fredat Ä°ncelemesi[/bold green]")
        
        # MÃ¼fredat verilerini al
        curriculum_data = None
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("MÃ¼fredat verileri yÃ¼kleniyor...", total=None)
            
            curriculum_response = await self.call_api("/curriculum", "GET")
            if curriculum_response.get('success') and curriculum_response.get('data'):
                curriculum_data = curriculum_response['data']
                
            progress.stop()
        
        # Ä°statistikleri gÃ¶ster
        if curriculum_data:
            subjects_info = curriculum_data.get('subjects', {})
            if subject_code in subjects_info:
                topic_count = subjects_info[subject_code].get('topic_count', 0)
                self.console.print(f"[dim]ðŸ“Š MÃ¼fredat: {topic_count} konu bulundu[/dim]")
        
        # Uzman analizi
        expert_query = f"""
        {subject_name} mÃ¼fredatÄ±nÄ± detaylÄ± analiz et:
        1. Temel konularÄ± ve kavramlarÄ± listele
        2. SÄ±nÄ±f seviyelerine gÃ¶re konularÄ± grupla  
        3. YKS'de Ã§Ä±kma olasÄ±lÄ±ÄŸÄ± yÃ¼ksek konularÄ± belirt
        4. Ã‡alÄ±ÅŸma stratejisi ve Ã¶ncelik sÄ±rasÄ± Ã¶ner
        5. Zor kavramlarÄ± Ã¶ÄŸrenmek iÃ§in pratik Ã¶neriler ver
        
        MÃ¼fredat verilerini kullanarak kapsamlÄ± bir analiz sun.
        """
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("Uzman mÃ¼fredatÄ± analiz ediyor...", total=None)
            
            response_data = await self.call_api("/chat", "POST", {
                "message": f"[{subject_name.upper()} UZMANI] {expert_query}",
                "context": {
                    "subject": subject_code, 
                    "mode": "curriculum_review",
                    "curriculum_data": curriculum_data
                },
                "session_id": self.session_id
            })
            
            progress.stop()
            
            if response_data.get('success'):
                self.console.print(f"\n[bold green]ðŸ“š {subject_name} MÃ¼fredat Analizi:[/bold green]")
                self.console.print(response_data.get('response', 'MÃ¼fredat bilgisi alÄ±namadÄ±'))
                
                if response_data.get('system_used'):
                    self.console.print(f"\n[dim]ðŸŽ“ Uzman: {response_data['system_used']}[/dim]")
            else:
                self.console.print(f"[red]Uzman mÃ¼fredat analizi hatasÄ±: {response_data.get('error', 'Bilinmeyen hata')}[/red]")
    
    async def _general_curriculum_overview(self):
        """Genel mÃ¼fredat Ã¶zeti"""
        self.log_rag_activity("Curriculum Data Access", collection="curriculum")
        
        result = await self.call_api("/curriculum", "GET")
        
        if result.get("success"):
            # API returns summary and curriculum data directly
            summary = result.get("summary", {})
            curriculum_data = result.get("curriculum", {})
            
            self.console.print(f"\n[bold green]ðŸ“Š GENEL MÃœFREDAT Ã–ZETÄ°[/bold green]")
            self.console.print(f"Toplam Ders: {summary.get('total_subjects', 0)}")
            self.console.print(f"Toplam Konu: {summary.get('total_topics', 0)}")
            
            # Dersleri gÃ¶ster
            table = Table(title="Mevcut Dersler")
            table.add_column("Ders", style="cyan")
            table.add_column("Konu SayÄ±sÄ±", style="green")
            table.add_column("SÄ±nÄ±flar", style="yellow")
            
            # Use curriculum data directly from API
            for subject, info in curriculum_data.items():
                # Get grades from the grades dict
                grades_dict = info.get("grades", {})
                grade_list = list(grades_dict.keys())
                grades_str = ", ".join(sorted(grade_list))
                
                table.add_row(
                    subject,
                    str(info.get("total_topics", 0)),
                    grades_str
                )
            
            self.console.print(table)
            
            # Also show subjects from summary if available
            if summary.get("subjects"):
                self.console.print(f"\n[bold]Ders DetaylarÄ±:[/bold]")
                for subject, details in summary.get("subjects", {}).items():
                    self.console.print(f"  â€¢ {subject}: {details.get('topic_count', 0)} konu")
            
            self.log_rag_activity(
                "General Curriculum Overview Displayed",
                results_count=len(curriculum_data)
            )
        else:
            self.console.print(f"[red]Error: {result.get('error', 'Unknown error')}[/red]")
            
    async def _show_curriculum_details(self, subject_name: str, subject_code: str, grade: str, unit_code: str, subtopic_code: str):
        """MÃ¼fredat detaylarÄ±nÄ± gÃ¶ster"""
        from core.curriculum_details import curriculum_details
        
        curriculum_details.show_curriculum_details(subject_name, subject_code, grade, unit_code, subtopic_code)